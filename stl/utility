#ifndef __utility__
#define __utility__

/*
  File
  ----
  utility
  
  Description
  -----------
  A hash table implementation.

  Authors:
  Justin R. Wilson
*/

namespace std {
  
  template <class T, class U>
  struct pair {
    typedef T first_type;
    typedef U second_type;

    T first;
    U second;

    pair () :
      first (),
      second ()
    { }

    pair (const T& t,
	  const U& u) :
      first (t),
      second (u)
    { }

    template <class V, class W>
    pair (const pair<V, W>& pr) :
      first (pr.first),
      second (pr.second)
    { }
  };

  template <class T, class U>
  pair<T, U>
  make_pair (const T& t,
	     const U& u)
  {
    return pair<T, U> (t, u);
  }

  namespace rel_ops {
    template <class T>
    bool
    operator!= (const T& x,
		const T& y)
    {
      return !(x == y);
    }

    template <class T>
    bool
    operator> (const T& x,
	       const T& y)
    {
      return (y < x);
    }

    template <class T>
    bool
    operator<= (const T& x,
		const T& y)
    {
      return !(y < x);
    }

    template <class T>
    bool
    operator>= (const T& x,
		const T& y)
    {
      return !(x < y);
    }

  }
}

/* Local Variables: */
/* mode:c++         */
/* End:             */

#endif /* __utility__ */
